#include<iostream>

//По-основни функции
int countDigitsOfANumber(int number);
int reverseNumber(int number);

int countDigitsOfANumber(int number) {
	int counter = 0;

	while (number != 0) {
		int d = number % 10;
		counter++;
		number /= 10;
	}

	return counter;
}

int reverseNumber(int number) {
	int revNumber = 0;
	while (number != 0) {
		int d = number % 10;
		revNumber = revNumber * 10 + d;
		number /= 10;
	}

	return revNumber;
}


//Exericse 1
void swap(int& a, int& b);
void swap(double& a, double& b);

//Exercise 2
int gcd(int num, int denom);

//Exercise 3
int removeKthDigit(int n, int k);

//Exercise 4
void createNewNumbers(int number);

//Exercise 1
void swap(int& a, int& b) {
	int temp = a;
	a = b;
	b = temp;

	std::cout << a << " " << b << std::endl;
}

void swap(double& a, double& b) {
	double temp = a;
	a = b;
	b = temp;

	std::cout << a << " " << b << std::endl;
}

//Exercise 2
int gcd(int num, int denom) {
	while (num != denom) {
		if (num > denom) {
			num = num - denom;
		}
		else {
			denom = denom = num;
		}
	}

	return num;
}

//Exercise 3
int removeKthDigit(int n, int k) {
	int numLength = countDigitsOfANumber(n);
	int newNumber = 0;
	int revNumber = reverseNumber(n);
	int pos = 1;

	for (size_t i = 0; i < numLength; ++i) {
		if (numLength % 2 != 0) {
			int d = n % 10;
			if (pos != k) {
				newNumber = newNumber * 10 + d;
			}
			pos++;
			n /= 10;
		}
		else {

		}
	}

	while (n != 0) {
		if (numLength % 2 == 0) {
			int d = n % 10;
			if(pos!=k) {
				newNumber = newNumber * 10 + d;
			}

		}
	}

	return newNumber;
}

//Exercise 4
void createNewNumbers(int number) {
	int newNumberOdd = 0, newNumberEven = 0;
	int numberLength = countDigitsOfANumber(number);
	int reversedNumber = reverseNumber(number);
	int pos = numberLength;

	while (number != 0) {
		if (pos % 2 == 0) {
			int d = number % 10;
			newNumberEven = newNumberEven * 10 + d;
		}
		else {
			int d = number % 10;
			newNumberOdd = newNumberOdd * 10 + d;
		}
		pos--;
		number /= 10;
	}
	
	std::cout << "Number consisting of digits on odd positions: " << reverseNumber(newNumberOdd) << std::endl;
	std::cout << "Number consisting of digits on even positions: " << reverseNumber(newNumberEven) << std::endl;
}

int main() {
	//Exercise 1
	//int num1, num2;
	//std::cout << "Enter the values of number1 and number2: ";
	//std::cin >> num1 >> num2;
	//if (!std::cin) {
	//	std::cerr << "You should enter numbers!" << std::endl;
	//	return 1;
	//}

	//swap(num1, num2);

	//double num3, num4;
	//std::cout << "Enter the values of number1 and number2: ";
	//std::cin >> num3 >> num4;
	//if (!std::cin) {
	//	std::cerr << "You should enter numbers!" << std::endl;
	//	return 1;
	//}

	//swap(num3, num4);

	//Exercise 2
	//int num1, denom1;
	//std::cout << "Enter the numerator and denominator of your first fraction: ";
	//std::cin >> num1 >> denom1;
	//int grComDiv = gcd(num1, denom1);
	//int newNum1 = num1 / grComDiv;
	//int newDenom1 = denom1 / grComDiv;
	//std::cout << num1 << "/" << denom1 << " = " << newNum1 << "/" << newDenom1 << std::endl;
	
	/*int num2, denom2;
	std::cout << "Enter the numerator and denominator of your second fraction: ";
	std::cin >> num2 >> denom2;
	int num12 = num1 * denom2 + num2 * denom1;
	int denom12 = denom1 * denom2;
	int grCommDev = gcd(num12, denom12);
	int newNum12 = num12 / grCommDev;
	int newDenom12 = denom12 / grCommDev;
	std::cout << num1 << "/" << denom1 << " + " << num2 << "/" << denom2 << " = " << newNum12 << "/" << newDenom12 << std::endl;*/

	//Exercise 3
	//int number, pos;
	//std::cout << "Enter a number and the position of the digit you'd like to remove: ";
	//std::cin >> number >> pos;
	//if (!std::cin || pos < 0) {
	//	std::cerr << "Your input is incorrect!" << std::endl;
	//	return 1;
	//}

	//Exericse 4
	int number;
	std::cout << "Enter a number: ";
	std::cin >> number;
	if (!std::cin) {
		std::cerr << "You should enter a number!" << std::endl;
		return 1;
	}

	createNewNumbers(number);

	return 0;
}
